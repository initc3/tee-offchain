import { Long } from './long';
import { isSet } from './misc';
export function toTimestamp(date) {
  const seconds = numberToLong(date.getTime() / 1_000);
  const nanos = date.getTime() % 1_000 * 1_000_000;
  return {
    seconds,
    nanos
  };
}
;
export function fromTimestamp(t) {
  let millis = t.seconds.toNumber() * 1_000;
  millis += t.nanos / 1_000_000;
  return new Date(millis);
}
;

const fromJSON = object => {
  return {
    seconds: isSet(object.seconds) ? Long.fromString(object.seconds) : Long.ZERO,
    nanos: isSet(object.nanos) ? Number(object.nanos) : 0
  };
};

export function fromJsonTimestamp(o) {
  if (o instanceof Date) {
    return o;
  } else if (typeof o === "string") {
    return new Date(o);
  } else {
    // TODO should we put this all inline?
    // return fromTimestamp(Timestamp.fromJSON(o));
    return fromTimestamp(fromJSON(o));
  }
}

function numberToLong(number) {
  return Long.fromNumber(number);
}