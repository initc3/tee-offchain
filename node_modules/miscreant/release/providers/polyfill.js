"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const aes_1 = require("./polyfill/aes");
const aes_ctr_1 = require("./polyfill/aes_ctr");
/**
 * Pure JavaScript cryptography implementations
 *
 * WARNING: Not constant time! May leak keys or have other security issues.
 */
class PolyfillCryptoProvider {
    constructor() {
        // This class doesn't do anything, it just signals that polyfill impls should be used
    }
    importBlockCipherKey(keyData) {
        return __awaiter(this, void 0, void 0, function* () {
            return new aes_1.default(keyData);
        });
    }
    importCTRKey(keyData) {
        return __awaiter(this, void 0, void 0, function* () {
            return new aes_ctr_1.default(new aes_1.default(keyData));
        });
    }
}
exports.PolyfillCryptoProvider = PolyfillCryptoProvider;
